package com.melnik.databaseTraining.controllers;

import com.melnik.databaseTraining.Student;
import com.melnik.databaseTraining.StudentStatus;
import com.melnik.databaseTraining.repo.StudentsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/student")
public class StudentController {

    @Autowired
    private StudentsRepository studentsRepository;

    @GetMapping
    public List<Student> getAllOrByStatus(@RequestParam(required = false) StudentStatus studentStatus) {
        if (studentStatus == null) {
            return studentsRepository.findAll();
        }
        return studentsRepository.list(studentStatus);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Student> getByID(@PathVariable("id") long id) {
        Optional<Student> student = studentsRepository.findById(id);
        return student.map(s -> ResponseEntity.ok().body(s))
                .orElse(ResponseEntity.notFound().build());
    }


    // send JSON without ID param cause ID is autogenerated
    @PostMapping()
    public ResponseEntity<?> add(@RequestBody Student student) {
        studentsRepository.save(student);
        return new ResponseEntity<>(HttpStatus.OK);
    }


    // send JSON without ID param cause ID is taken from the path
    @PutMapping("/{id}")
    public ResponseEntity<?> edit(@PathVariable("id") long id, @RequestBody Student student) {
        if (!studentsRepository.existsById(id)) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        } else {
            studentsRepository.update(id, student);
            return new ResponseEntity<>(HttpStatus.OK);
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> delete(@PathVariable("id") long id) {
        if (studentsRepository.existsById(id)) {
            studentsRepository.deleteById(id);
            return new ResponseEntity<>(HttpStatus.OK);
        } else return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }

}

